# Base Generated by Selenium IDE - Edited by J122016
import os
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.common.exceptions import *

# === write Log func ===
# Funciones internas
def AddLog(text, printInConsole=True):
    '''
    @param text: text to be logged
    @param printInConsole: if text will be printed in console, default True
    '''
    try:
        logging.info(text)
        print(text) if printInConsole else None
    except Exception as e:
        raise e

# === App local path (manual edit) ===
def app_path(driver):
  html_file = os.getcwd() + "/" + "..//..//ContactManager.html" #open local relative file App
  driver.get("file:///" + html_file)
  return driver


# === Tests (Generated by Selenium IDE edited to be dynamic path & parameters)===
class TestContactAppCRUDTests():
  def setup_method(self):
    # -- Select your configured browser webdriver --
    self.driver = webdriver.Edge()
    #self.driver = webdriver.Chrome()
    #self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self):
    self.driver.close()
    self.driver.quit()
  
  def test_setUpTearDownCleanApp(self):
    self.driver = app_path(self.driver)
    wait = WebDriverWait(self.driver, 30)
    wait.until(expected_conditions.element_to_be_clickable((By.NAME, "DELETE ALL APP DATA")))
    self.driver.find_element(By.NAME, "DELETE ALL APP DATA").click()
    elements = self.driver.find_elements(By.XPATH, "//div[@id=\'DynamicContactTable-tbody\']")
    assert len(elements) == 0
    AddLog("-> 'Test' test_setUpTearDownCleanApp completado correctamente!\n----")
    #self.driver.close() #avoid bc end session if only window, can't test persistency, i mean in parallel yes but no app not prepared for that
  
  def test_agregarContacto(self):
    #self.driver = app_path(self.driver) #sino prueba en otra ventana la cual hay que cerrar .close()
    wait = WebDriverWait(self.driver, 30)
    AddLog("- Intentando agregar un contacto con datos invalidos")
    cantactFormTab = wait.until(expected_conditions.element_to_be_clickable((By.ID, "v-pills-contact-form-tab")))
    cantactFormTab.click()
    formSubmitButton = wait.until(expected_conditions.element_to_be_clickable((By.NAME, "Save contact")))
    self.driver.find_element(By.ID, "inputName").clear() #clear()->just in case other test before should not but
    self.driver.find_element(By.ID, "inputName").click()
    self.driver.find_element(By.ID, "inputName").send_keys("cualquier nombre")
    self.driver.find_element(By.ID, "inputPhone").clear()
    self.driver.find_element(By.ID, "inputPhone").click()
    self.driver.find_element(By.ID, "inputPhone").send_keys("no valido")
    self.driver.find_element(By.ID, "inputSurname1").clear()
    self.driver.find_element(By.ID, "inputSurname1").click()
    self.driver.find_element(By.ID, "inputSurname1").send_keys("cualquiera")
    self.driver.find_element(By.ID, "inputSurname2").clear()
    self.driver.find_element(By.ID, "inputSurname2").click()
    self.driver.find_element(By.ID, "inputSurname2").send_keys("apellido")
    self.driver.find_element(By.ID, "inputEmail").clear()
    self.driver.find_element(By.ID, "inputEmail").click()
    self.driver.find_element(By.ID, "inputEmail").send_keys("correo@valido.com")
    self.driver.find_element(By.NAME, "Save contact").click()
    AddLog("- Verificando que no se añadio a la tabla 1/2")
    cantactTableTab = wait.until(expected_conditions.element_to_be_clickable((By.ID, "v-pills-contacts-tab")))
    cantactTableTab.click()
    DynamicContactTable = wait.until(expected_conditions.visibility_of(self.driver.find_element(By.ID, "DynamicContactTable"))) #no deberia ser visible, por eso solo se espera carga en DOM
    elements = self.driver.find_elements(By.XPATH, "//div[@id=\'DynamicContactTable-tbody\']")
    assert len(elements) == 0
    self.driver.implicitly_wait(3) #End of minitest1 + animation slow problem , maybe improve spliting in others test

    AddLog("- Variando otros campos para invalidez")
    cantactFormTab.click()
    formSubmitButton = wait.until(expected_conditions.element_to_be_clickable((By.NAME, "Save contact"))) # just in case
    self.driver.find_element(By.ID, "inputPhone").clear()
    self.driver.find_element(By.ID, "inputPhone").send_keys("+12 123456789")
    self.driver.find_element(By.ID, "inputEmail").clear()
    self.driver.find_element(By.ID, "inputEmail").send_keys("correoNOvalido.com")
    formSubmitButton.click()
    AddLog("- Verificando que no se añadio a la tabla 2/2")
    cantactTableTab.click()
    DynamicContactTable = wait.until(expected_conditions.presence_of_element_located((By.ID, "DynamicContactTable"))) # revisar variable no ocupada por ahora
    elements = self.driver.find_elements(By.XPATH, "//div[@id=\'DynamicContactTable-tbody\']")
    assert len(elements) == 0
    self.driver.implicitly_wait(3) #End of minitest2 + animation slow problem

    AddLog("- Agregando un contacto correctamente")
    cantactFormTab.click()
    formSubmitButton = wait.until(expected_conditions.element_to_be_clickable((By.NAME, "Save contact"))) # just in case
    wait.until(expected_conditions.element_to_be_clickable((By.ID, "inputEmail"))) # otherwise not interactable here, idk why if supposed to load before submit button. Temporal solution
    self.driver.find_element(By.ID, "inputEmail").clear()
    self.driver.find_element(By.ID, "inputEmail").send_keys("correo@valido.com")
    formSubmitButton.click()
    AddLog("- Validando  datos del contacto guardado")
    DynamicContactTable = wait.until(expected_conditions.visibility_of(self.driver.find_element(By.ID, "DynamicContactTable"))) #se espera visibilidad
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[1]").text == "cualquier nombre"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[2]").text == "cualquiera"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[3]").text == "apellido"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[4]").text == "correo@valido.com"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[5]").text == "+12 123456789"

    AddLog("-> Test test_agregarContacto completado correctamente!\n----")
    #self.driver.close()
  
  def test_editarContactoFallidoSinReemplazar(self):
    #self.driver = app_path(self.driver)
    wait = WebDriverWait(self.driver, 30)
    AddLog("- Intentando agregar un nuevo contacto con telefono/id ya existente") #Cambiar intentando por dado - TODO ver para entrega
    DynamicContactTable = wait.until(expected_conditions.visibility_of(self.driver.find_element(By.ID, "DynamicContactTable"))) #just in case, but set up before in theory
    self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[6]/button").click()
    formSubmitButton = wait.until(expected_conditions.element_to_be_clickable((By.NAME, "Save contact")))
    self.driver.find_element(By.ID, "inputName").clear()
    self.driver.find_element(By.ID, "inputName").send_keys("cualquier nombre modificado")
    self.driver.find_element(By.ID, "inputEmail").clear()
    self.driver.find_element(By.ID, "inputEmail").send_keys("correoModificado@valido.com")
    self.driver.find_element(By.ID, "inputSurname1").clear()
    self.driver.find_element(By.ID, "inputSurname1").send_keys("cualquieraModificado")
    self.driver.find_element(By.ID, "inputSurname2").clear()
    self.driver.find_element(By.ID, "inputSurname2").send_keys("apellidoModificado")
    #editar telefono no es necesario, al editar app autocompleta
    formSubmitButton.click()
    AddLog("- Rechazando sobreescritura")
    wait.until(expected_conditions.alert_is_present())
    alert = self.driver.switch_to.alert
    assert alert.text == "Phone already exist.\nDo you wish overwrite contact?, otherwise cancel." #Do not switch message in app!
    alert.dismiss()
    AddLog("- Revisando datos no fueron sobreescritos")
    cantactTableTab = wait.until(expected_conditions.element_to_be_clickable((By.ID, "v-pills-contacts-tab")))
    cantactTableTab.click()
    DynamicContactTable = wait.until(expected_conditions.visibility_of(self.driver.find_element(By.ID, "DynamicContactTable")))
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[1]").text == "cualquier nombre"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[2]").text == "cualquiera"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[3]").text == "apellido"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[4]").text == "correo@valido.com"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[5]").text == "+12 123456789"
    AddLog("-> Test test_editarContactoFallidoSinReemplazar completado correctamente!\n----")
    #self.driver.close()
  
  def test_editarContactoCorrectamenteSinTel(self):
    #self.driver = app_path(self.driver)
    AddLog("- Editando un nuevo contacto manteniendo telefono/id")
    wait = WebDriverWait(self.driver, 30)
    self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[6]/button").click()
    formSubmitButton = wait.until(expected_conditions.element_to_be_clickable((By.NAME, "Save contact")))
    self.driver.find_element(By.ID, "inputName").clear()
    self.driver.find_element(By.ID, "inputName").send_keys("cualquier nombre modificado")
    self.driver.find_element(By.ID, "inputEmail").clear()
    self.driver.find_element(By.ID, "inputEmail").send_keys("correoModificado@valido.com")
    self.driver.find_element(By.ID, "inputSurname1").clear()
    self.driver.find_element(By.ID, "inputSurname1").send_keys("cualquieraModificado")
    self.driver.find_element(By.ID, "inputSurname2").clear()
    self.driver.find_element(By.ID, "inputSurname2").send_keys("apellidoModificado")
    #editar telefono no es necesario, al editar app autocompleta, assert?
    formSubmitButton.click()
    AddLog("- Aceptando sobreescritura")
    wait.until(expected_conditions.alert_is_present())
    alert = self.driver.switch_to.alert
    assert alert.text == "Phone already exist.\nDo you wish overwrite contact?, otherwise cancel."
    alert.accept()
    AddLog("- Revisando datos fueron sobreescritos") #cambio a tabla automatico
    DynamicContactTable = wait.until(expected_conditions.visibility_of(self.driver.find_element(By.ID, "DynamicContactTable")))
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[1]").text == "cualquier nombre modificado"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[2]").text == "cualquieraModificado"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[3]").text == "apellidoModificado"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[4]").text == "correoModificado@valido.com"
    AddLog("-> Test test_editarContactoCorrectamenteSinTel completado correctamente!\n----")
    #self.driver.close()
  
  def test_editarContactoTel(self):
    #self.driver = app_path(self.driver)
    AddLog("- Editando un nuevo contacto cambiando telefono/id")
    wait = WebDriverWait(self.driver, 30)
    self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[6]/button").click()
    formSubmitButton = wait.until(expected_conditions.element_to_be_clickable((By.NAME, "Save contact")))
    self.driver.find_element(By.ID, "inputPhone").clear()
    self.driver.find_element(By.ID, "inputPhone").send_keys("+12 987654321")
    self.driver.find_element(By.ID, "inputName").clear()
    self.driver.find_element(By.ID, "inputName").send_keys("cualquier nombre modificado")
    self.driver.find_element(By.ID, "inputEmail").clear()
    self.driver.find_element(By.ID, "inputEmail").send_keys("correoModificado@valido.com")
    self.driver.find_element(By.ID, "inputSurname1").clear()
    self.driver.find_element(By.ID, "inputSurname1").send_keys("cualquieraModificado")
    self.driver.find_element(By.ID, "inputSurname2").clear()
    self.driver.find_element(By.ID, "inputSurname2").send_keys("apellidoModificado")
    formSubmitButton.click()
    AddLog("- Revisando contacto fue agregado, el entiguo se maniene por suposición?") #cambio a tabla automatico - TODO revisar suposicion!
    DynamicContactTable = wait.until(expected_conditions.visibility_of(self.driver.find_element(By.ID, "DynamicContactTable")))
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 987654321\']/td[1]").text == "cualquier nombre modificado"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 987654321\']/td[2]").text == "cualquieraModificado"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 987654321\']/td[3]").text == "apellidoModificado"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 987654321\']/td[4]").text == "correoModificado@valido.com"
    assert self.driver.find_element(By.XPATH, "//tr[@id=\'+12 987654321\']/td[5]").text == "+12 987654321"
    AddLog("-> Test test_editarContactoTel completado correctamente!\n----")
    #self.driver.close()
  
  def test_eliminarContacto(self):
    #self.driver = app_path(self.driver)
    wait = WebDriverWait(self.driver, 30)
    self.driver.find_element(By.XPATH, "//tr[@id=\'+12 123456789\']/td[6]/button[2]").click()
    AddLog("- Comprobando que no se muestra contacto")
    elements = self.driver.find_elements(By.XPATH, "//tr[@id=\'+12 123456789\']/td")
    assert len(elements) == 0
    #self.driver.close()


# === All tests execution ===
if __name__ == '__main__':
  #Setup logs
  logging.basicConfig(filename='SeleniumTest.log', encoding='utf-8', filemode='w', format='%(asctime)s | %(message)s', level=logging.INFO) #DEBUG log external browser checks

  # Instantiate tests
  AddLog("Executing all test, actions flow (CRUD, implicit Read) in normal order...")
  AddLog("0.0/4 - Setup driver...")
  passing = True
  Tests = TestContactAppCRUDTests()
  Tests.setup_method()

  # Set test parameters... todo later, improvement

  # Full flow of test suit
  try:
    AddLog("0.1/4 - Cleaning old data")
    Tests.test_setUpTearDownCleanApp() #Clean possible old data in app

    AddLog("1.0/4 - Add new contact")
    Tests.test_agregarContacto()

    AddLog("2.0/4 - Edit contact but retracted to avoid overwrite")
    Tests.test_editarContactoFallidoSinReemplazar()

    AddLog("2.1/4 - Edit contact, overwrite old")
    Tests.test_editarContactoCorrectamenteSinTel()

    AddLog("2.3/4 - Edit contact with new phone/id, add new one & keep old ?")
    Tests.test_editarContactoTel()  #Edit contact with new phone/id => add new one & keep old (assumption to avoid... ???)

    AddLog("3/4 - Delete an existing contact")
    Tests.test_eliminarContacto()

    AddLog("4/4 - Cleaning data...")
    Tests.test_setUpTearDownCleanApp()
  except Exception as e:
    passing = False
    AddLog("Exception happen: " + str(e) + " - Details: " + str(e.args))

  #close driver test
  Tests.teardown_method()
  AddLog("Tests passed!") if passing else AddLog("Tests not passed")
